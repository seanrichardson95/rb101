> Directions

Describe the difference between ! and ? in Ruby. And explain what would happen in the following scenarios:

1. what is != and where should you use it?
2. put ! before something, like !user_name
3. put ! after something, like words.uniq!
4. put ? before something
5. put ? after something
6. put !! before something, like !!user_name

> My answer:

1.  != stands for 'does not equal'. You use it in conditional statements where you
    want to test if one thing does not equal another. puts num if num != 6

2.  If you put ! before something, it'll return the boolean value opposite of whatever follows it.
    If 'user_name' is truthy, then !user_name will return false. If user_name = nil, then !user_name
    will return true.
  
3.  A ! after a method call usually means that the method is destructive, aka it mutates the caller.

4.  When I put a ? before a single digit integer, I get the integer returned in quotation marks.
    I'm not sure what else I can do. In front of an array, I get an error. You can also use them
    in ternary expressions.
    
5.  If you put ? at the end of the method name, it is convention that the method will return a 
    boolean value.
    
6.  !! before something will test it's truthiness. Anything that is not 'nil' or 'false' will
    return true.
    
> LS Answer:

Just to clarify, if you see ! or ? at the end of the method, it's actually part of the method name, and not Ruby syntax. Therefore, you really don't know what the method is doing, even if it ends in those characters -- it depends on the method implementation. The other uses are actual Ruby syntax:

- != means "not equals"
- ? : is the ternary operator for if...else
- !!<some object> is used to turn any object into their boolean equivalent. (Try it in irb)
- !<some object> is used to turn any object into the opposite of their boolean equivalent, just like the above, but opposite.